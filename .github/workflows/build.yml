name: Build

on:
  push:
    branches: [ "main" ]
    paths:
      - "**.gradle.kts"
      - "iosInputs"
      - "**.kt"
      - "gradle/**"
      - "gradle.properties"
      - "keys/**"
      - "**/src/**"
      - "**.pro"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-android:
    runs-on: ubuntu-latest
    name: "Build Android"

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'corretto'
        cache: gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Set up keystore
      env:
        STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        mkdir -p keys
        echo "storePassword=$STORE_PASSWORD" > keys/keystore.properties
        echo "keyPassword=$KEY_PASSWORD" >> keys/keystore.properties
    - name: Build with Gradle
      run: ./gradlew assembleRelease --no-daemon
    - name: Upload artifact
      uses: actions/upload-artifact@v4.6.2
      with:
        name: Android
        path: ./composeApp/build/outputs/apk/release/composeApp-release.apk
  build-linux:
    runs-on: ubuntu-latest
    name: "Build Linux"

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Set up keystore
        env:
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          mkdir -p keys
          echo "storePassword=$STORE_PASSWORD" > keys/keystore.properties
          echo "keyPassword=$KEY_PASSWORD" >> keys/keystore.properties
      - name: Build with Gradle
        run: ./gradlew createReleaseDistributable --no-daemon
      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Linux
          path: ./composeApp/build/compose/binaries/main-release/app/*
  build-macos:
    runs-on: macos-latest
    name: "Build macOS"

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Set up keystore
        env:
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          mkdir -p keys
          echo "storePassword=$STORE_PASSWORD" > keys/keystore.properties
          echo "keyPassword=$KEY_PASSWORD" >> keys/keystore.properties
      - name: Build with Gradle
        run: ./gradlew createReleaseDistributable --no-daemon
      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: macOS
          path: ./composeApp/build/compose/binaries/main-release/app/*

  build-windows:
    runs-on: windows-latest
    name: "Build Windows"

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: gradle
      - name: Set up keystore
        env:
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path keys
          Set-Content -Path keys/keystore.properties -Value "storePassword=$env:STORE_PASSWORD"
          Add-Content -Path keys/keystore.properties -Value "keyPassword=$env:KEY_PASSWORD"
      - name: Build with Gradle
        shell: pwsh
        run: ./gradlew.bat createReleaseDistributable --no-daemon
      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Windows
          path: ./composeApp/build/compose/binaries/main-release/app/*

#  build-ios:
#    runs-on: macos-latest
#    name: "Build iOS"
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'corretto'
#          cache: gradle
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#      - name: Set up keystore
#        env:
#          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
#          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
#        run: |
#          mkdir -p keys
#          echo "storePassword=$STORE_PASSWORD" > keys/keystore.properties
#          echo "keyPassword=$KEY_PASSWORD" >> keys/keystore.properties
#            - name: Install the Apple certificate and provisioning profile
#              env:
#                BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#                P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#                BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#                KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#              run: |
#                # create variables
#                CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#                PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#                KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#                # import certificate and provisioning profile from secrets
#                echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#                echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
#
#                # create temporary keychain
#                security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#                security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#                security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#                # import certificate to keychain
#                security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#                security list-keychain -d user -s $KEYCHAIN_PATH
#
#                # apply provisioning profile
#                mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#                cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#      - name: Prepare build
#        run: mkdir $RUNNER_TEMP/build
#      - name: Build archive
#        run: |
#          xcodebuild -scheme "iosApp" \
#          -archivePath $RUNNER_TEMP/iosApp.xcarchive \
#          -sdk iphoneos \
#          -configuration Release \
#          -destination generic/platform=iOS \
#          clean archive
#
#      - name: Export IPA
#        env:
#          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
#        run: |
#          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
#          xcodebuild \
#            -exportArchive \
#            -archivePath $RUNNER_TEMP/iosApp.xcarchive \
#            -exportOptionsPlist $EXPORT_OPTS_PATH \
#            -exportPath $RUNNER_TEMP/build
#      - name: Upload iOS artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: iOS
#          path: ${{ runner.temp }}/build/iosApp.ipa